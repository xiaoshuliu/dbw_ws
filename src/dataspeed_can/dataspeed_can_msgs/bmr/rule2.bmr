class update_dataspeed_can_msgs_CanMessage_2866d426ed29ed9fab7f393d3ece69b0(MessageUpdateRule):
	old_type = "dataspeed_can_msgs/CanMessage"
	old_full_text = """
uint8[8] data
uint32 id
bool extended
uint8 dlc
"""

	new_type = "can_msgs/Frame"
	new_full_text = """
Header header
uint32 id
bool is_rtr
bool is_extended
bool is_error
uint8 dlc
uint8[8] data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""

	order = 0
	migrated_types = []

	valid = True

	def update(self, old_msg, new_msg):
		new_msg.header = self.get_new_class('std_msgs/Header')()
		new_msg.id = old_msg.id
		new_msg.is_rtr = 0
		new_msg.is_extended = old_msg.extended
		new_msg.is_error = 0
		new_msg.dlc = old_msg.dlc
		new_msg.data = old_msg.data

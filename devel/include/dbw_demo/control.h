// Generated by gencpp from file dbw_demo/control.msg
// DO NOT EDIT!


#ifndef DBW_DEMO_MESSAGE_CONTROL_H
#define DBW_DEMO_MESSAGE_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dbw_demo
{
template <class ContainerAllocator>
struct control_
{
  typedef control_<ContainerAllocator> Type;

  control_()
    : brake(0.0)
    , throttle(0.0)
    , steering(0.0)
    , steering_mult(false)
    , gear_cmd(0)
    , turn_signal_cmd(0)  {
    }
  control_(const ContainerAllocator& _alloc)
    : brake(0.0)
    , throttle(0.0)
    , steering(0.0)
    , steering_mult(false)
    , gear_cmd(0)
    , turn_signal_cmd(0)  {
  (void)_alloc;
    }



   typedef float _brake_type;
  _brake_type brake;

   typedef float _throttle_type;
  _throttle_type throttle;

   typedef float _steering_type;
  _steering_type steering;

   typedef uint8_t _steering_mult_type;
  _steering_mult_type steering_mult;

   typedef int16_t _gear_cmd_type;
  _gear_cmd_type gear_cmd;

   typedef int16_t _turn_signal_cmd_type;
  _turn_signal_cmd_type turn_signal_cmd;




  typedef boost::shared_ptr< ::dbw_demo::control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dbw_demo::control_<ContainerAllocator> const> ConstPtr;

}; // struct control_

typedef ::dbw_demo::control_<std::allocator<void> > control;

typedef boost::shared_ptr< ::dbw_demo::control > controlPtr;
typedef boost::shared_ptr< ::dbw_demo::control const> controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dbw_demo::control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dbw_demo::control_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dbw_demo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'dbw_demo': ['/home/liu/dbw_ws/src/dbw_mkz_ros/dbw_demo/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dbw_demo::control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dbw_demo::control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dbw_demo::control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dbw_demo::control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dbw_demo::control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dbw_demo::control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dbw_demo::control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9198f2552165ab2d06332d076b42111d";
  }

  static const char* value(const ::dbw_demo::control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9198f2552165ab2dULL;
  static const uint64_t static_value2 = 0x06332d076b42111dULL;
};

template<class ContainerAllocator>
struct DataType< ::dbw_demo::control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbw_demo/control";
  }

  static const char* value(const ::dbw_demo::control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dbw_demo::control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
  float32 brake\n\
  float32 throttle\n\
  float32 steering\n\
  bool steering_mult\n\
  int16 gear_cmd\n\
  int16 turn_signal_cmd\n\
";
  }

  static const char* value(const ::dbw_demo::control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dbw_demo::control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.brake);
      stream.next(m.throttle);
      stream.next(m.steering);
      stream.next(m.steering_mult);
      stream.next(m.gear_cmd);
      stream.next(m.turn_signal_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dbw_demo::control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dbw_demo::control_<ContainerAllocator>& v)
  {
    s << indent << "brake: ";
    Printer<float>::stream(s, indent + "  ", v.brake);
    s << indent << "throttle: ";
    Printer<float>::stream(s, indent + "  ", v.throttle);
    s << indent << "steering: ";
    Printer<float>::stream(s, indent + "  ", v.steering);
    s << indent << "steering_mult: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steering_mult);
    s << indent << "gear_cmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gear_cmd);
    s << indent << "turn_signal_cmd: ";
    Printer<int16_t>::stream(s, indent + "  ", v.turn_signal_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DBW_DEMO_MESSAGE_CONTROL_H
